{"name":"Queue","tagline":"task queue component for the browser backed by localstorage","body":"\r\n# queue\r\n\r\n  task queue component for (mobile) browser backed by localstorage\r\n\r\n## Installation\r\n\r\n    $ component install pgherveou/queue\r\n\r\n## Get started\r\n\r\n```js\r\nvar queue = require('queue')\r\n  .on('error', function(job) {}) // queue error handler\r\n  .on('complete', function(job) {}); // queue success handler\r\n\r\n// define a new task\r\nqueue\r\n  .define('my-task')\r\n  .online() // check that navigator is online before attempting to process job\r\n  .interval('10s') // replay a failed job every 10sec (default is 2sec)\r\n  .retry(5) // retry up to 5 times\r\n  .timeout('10ms') // task fail if it lasts more than 10ms\r\n  .lifetime('5m') // stop retrying if job is more than 5min old\r\n  .action(function(job, done) {\r\n    // ...\r\n    done(err); // pass an error to the callback if task failed\r\n  });\r\n\r\n// load and process jobs persisted in the localstorage\r\nqueue.start();\r\n\r\n// process a new job\r\njob = queue\r\n  .create('my-task', data)\r\n  .on('error', function() {}) // job error handler\r\n  .on('complete', function() {}) // job success handler\r\n```\r\n\r\n## Queue API\r\n\r\n### require(\"queue\")\r\n\r\nget the default queue instance\r\n\r\n### .createQueue(id)\r\n\r\ncreate a new queue with specific id\r\nlocalstorage keys will be prefixed with queue<id>\r\n\r\n### .define(name)\r\n\r\ndefine a new Task with given name\r\n\r\n### .on([error complete], function(job) {})\r\n\r\nQueue is an event emitter, whenever a job fail or complete\r\nan error or complete event is triggered\r\n\r\n## Task Api\r\n\r\n### .online()\r\n\r\ncheck that navigator is online before attempting to process job\r\n\r\n### .interval(time)\r\n\r\ndefine the interval between two retries (default is '2sec')\r\n\r\n### .retry(n)\r\n\r\ndefine max number of retries\r\n\r\n### .timeout(time)\r\n\r\ndefine task timeout\r\n\r\n### .lifetime(time)\r\n\r\na job expires if it exceeds cration-time + time\r\n\r\n### .action(function(job, done))\r\n\r\naction to execute receive a job and a callback\r\n\r\n## License\r\n\r\n  MIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}